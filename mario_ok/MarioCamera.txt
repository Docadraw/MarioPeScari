#include <fstream>
#include <winbgim.h>
#include <windows.h>
#include <string.h>

using namespace std;

#define MAX 20
#define latime 75

#define SUS 72
#define JOS 80
#define STG 75
#define DRP 77
#define ESC 27
#define SPC 32
#define TAB 9
#define BKS 8

int imario, jmario, ipostaza;
char tasta;
string directie;

int scor, nrstelute;

int nrLinii, nrColoane, i, j;
char harta[MAX][MAX];
char car;

ifstream fisier("harta2.txt");
ofstream gameLog("gameLog.txt");

void showEndGameMenu();

void afiseazaMario()
{
    int y = imario * latime, x = jmario * latime;

    switch (ipostaza) {
    case -10: readimagefile("mario_spate1.jpg", x, y, x + latime, y + latime); break;
    case 10: readimagefile("mario_spate2.jpg", x, y, x + latime, y + latime); break;
    case 1:
        readimagefile("mario11.jpg", x, y, x + latime, y + latime); break;
    case 2:
        readimagefile("mario22.jpg", x, y, x + latime, y + latime); break;
    case -1:
        readimagefile("mario55.jpg", x, y, x + latime, y + latime); break;
    case -2:
        readimagefile("mario66.jpg", x, y, x + latime, y + latime); break;
    }
}

void afiseazaPoza(char c, int i, int j)
{
    if (c == '@')
        readimagefile("iarba.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == '#')
        readimagefile("scara.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == '*')
        readimagefile("stea.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == '.')
        readimagefile("fundal.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == ',')
        readimagefile("fundal2.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == '!')
        readimagefile("fundal3.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
    if (c == '?')
        readimagefile("fundal4.jpg", latime * j, latime * i, latime * (j + 1), latime * (i + 1));
}

void stergeMario()
{
    afiseazaPoza(harta[imario][jmario], imario, jmario);
}

void afiseazaScor()
{
    int i;
    for (i = 1; i <= scor; i++)
        readimagefile("stea.jpg", 30 * i, 0, 30 * i + 30, 30);
    afiseazaMario();
    if (scor < nrstelute)
    {
        for (i = 800; i <= 1200; i += 30) Beep(i, 20);
    }
    else
    {
        PlaySound("7.wav", NULL, SND_SYNC);
        PlaySound("8.wav", NULL, SND_SYNC);
        showEndGameMenu();
        closegraph();
        exit(0);
    }
}

void urmatoareaIpostaza()
{
    if (directie == "dreapta")
    {
        if (abs(ipostaza) == 10) ipostaza = 1;
        if (ipostaza < 0) ipostaza = -ipostaza;
        ipostaza++; if (ipostaza == 2) ipostaza = 1;
        if (jmario < nrColoane - 1 && (harta[imario + 1][jmario + 1] == '@' || harta[imario + 1][jmario + 1] == '#'))
        {
            jmario++;
            if (harta[imario][jmario] == '*')
            {
                scor++; harta[imario][jmario] = '.'; afiseazaScor();
            }
        }
    }
    else
        if (directie == "stanga")
        {
            if (abs(ipostaza) == 10) ipostaza = -1;
            if (ipostaza > 0) ipostaza = -ipostaza;
            ipostaza--; if (ipostaza == -2) ipostaza = -1;
            if (jmario > 0 && (harta[imario + 1][jmario - 1] == '@' || harta[imario + 1][jmario - 1] == '#'))
            {
                jmario--;
                if (harta[imario][jmario] == '*')
                {
                    scor++; harta[imario][jmario] = '.'; afiseazaScor();
                }
            }
        }
    if (directie == "sus")
    {
        if (abs(ipostaza) == 10) ipostaza = -ipostaza;
        else ipostaza = 10;
        if (harta[imario - 1][jmario] == '#') imario--;
    }
    if (directie == "jos")
    {
        if (abs(ipostaza) == 10) ipostaza = -ipostaza;
        else ipostaza = -10;
        if (harta[imario + 1][jmario] == '#') imario++;
    }
}

void incarcaHarta() {
    fisier >> nrLinii >> nrColoane;
    // Теперь не инициализируем графическое окно здесь, так как это делается в main
    // initwindow(latime * nrColoane, latime * nrLinii, "Mario pe scari");
    // setbkcolor(WHITE); cleardevice();
    nrstelute = 0;
    for (i = 0; i < nrLinii; i++) {
        for (j = 0; j < nrColoane; j++) {
            fisier >> car;
            if (car == '*') nrstelute++;
            if (car == 'M') { imario = i; jmario = j; car = '.'; }
            harta[i][j] = car;
            // Теперь не отображаем карту здесь
            // afiseazaPoza(harta[i][j], i, j);
        }
    }
    fisier.close();

    scor = 0;
}


void showMenu(int &incepeX1, int &incepeY1, int &incepeX2, int &incepeY2,
              int &inchideX1, int &inchideY1, int &inchideX2, int &inchideY2) {
    cleardevice();
    setbkcolor(WHITE); // Установить белый цвет фона
    setcolor(BLACK); // Установить цвет текста на черный
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3); // Установить стиль текста

    // Получаем размеры окна
    int windowWidth = getmaxx();
    int windowHeight = getmaxy();

    // Размеры кнопок
    int buttonWidth = 200;
    int buttonHeight = 50;

    // Расчет координат для кнопки "Incepe"
    incepeX1 = (windowWidth - buttonWidth) / 2;
    incepeY1 = (windowHeight - buttonHeight) / 2 - 60; // Смещение от центра вверх
    incepeX2 = incepeX1 + buttonWidth;
    incepeY2 = incepeY1 + buttonHeight;

    // Рисуем кнопку "Incepe"
    rectangle(incepeX1, incepeY1, incepeX2, incepeY2);
    outtextxy(incepeX1 + 70, incepeY1 + 15, "Incepe"); // Смещение текста внутри кнопки

    // Расчет координат для кнопки "Inchide"
    inchideX1 = incepeX1;
    inchideY1 = incepeY2 + 20; // Смещение от первой кнопки вниз
    inchideX2 = inchideX1 + buttonWidth;
    inchideY2 = inchideY1 + buttonHeight;

    // Рисуем кнопку "Inchide"
    rectangle(inchideX1, inchideY1, inchideX2, inchideY2);
    outtextxy(inchideX1 + 70, inchideY1 + 15, "Inchide");
}

bool isInsideButton(int x, int y, int left, int top, int right, int bottom) {
    return (x >= left && x <= right && y >= top && y <= bottom);
}

void showEndGameMenu() {

    cleardevice();
    setbkcolor(WHITE);
    setcolor(BLACK);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);

    int windowWidth = getmaxx();
    int windowHeight = getmaxy();

    // Отображение сообщения
    outtextxy(windowWidth / 2 - 100, windowHeight / 2 - 100, "Ati terminat jocul");

    // Кнопка для выхода
    int exitButtonX1 = (windowWidth - 200) / 2;
    int exitButtonY1 = (windowHeight / 2) + 30;
    int exitButtonX2 = exitButtonX1 + 200;
    int exitButtonY2 = exitButtonY1 + 50;

    rectangle(exitButtonX1, exitButtonY1, exitButtonX2, exitButtonY2);
    outtextxy(exitButtonX1 + 35, exitButtonY1 + 15, "Iesire");

    bool running = true;
    while (running) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            int x, y;
            getmouseclick(WM_LBUTTONDOWN, x, y);

            if (isInsideButton(x, y, exitButtonX1, exitButtonY1, exitButtonX2, exitButtonY2)) {
                running = false;
            }
        }
    }
}

void updateCamera(int windowWidth, int windowHeight) {
    int cameraWidth = 800;
    int cameraHeight = 600;

    // Центр камеры по Марио
    int cameraX = jmario * latime - cameraWidth / 2;
    int cameraY = imario * latime - cameraHeight / 2;

    // Ограничение камеры, чтобы она не выходила за пределы карты
    cameraX = max(0, min(cameraX, nrColoane * latime - cameraWidth));
    cameraY = max(0, min(cameraY, nrLinii * latime - cameraHeight));

    // Расчет границ видимости камеры
    int startCol = max(0, cameraX / latime);
    int endCol = min(nrColoane, (cameraX + cameraWidth) / latime);
    int startRow = max(0, cameraY / latime);
    int endRow = min(nrLinii, (cameraY + cameraHeight) / latime);

    // Рисуем карту в видимой области камеры
    for (int i = startRow; i < endRow; i++) {
        for (int j = startCol; j < endCol; j++) {
            afiseazaPoza(harta[i][j], i, j);
        }
    }

    // Рисуем Марио
    afiseazaMario();
}


int main()
{
    initwindow(1920, 1000, "Mario");

    int incepeX1, incepeY1, incepeX2, incepeY2;
    int inchideX1, inchideY1, inchideX2, inchideY2;
    showMenu(incepeX1, incepeY1, incepeX2, incepeY2, inchideX1, inchideY1, inchideX2, inchideY2);

    bool running = true;
    while (running) {
        if (ismouseclick(WM_LBUTTONDOWN)) {
            int x, y;
            getmouseclick(WM_LBUTTONDOWN, x, y);

            // Проверка нажатия на кнопки
            if (isInsideButton(x, y, incepeX1, incepeY1, incepeX2, incepeY2)) {
                // Обработка нажатия кнопки "Incepe"
                cleardevice();
                // ... Код для запуска игры ...
                break;
            } else if (isInsideButton(x, y, inchideX1, inchideY1, inchideX2, inchideY2)) {
                // Обработка нажатия кнопки "Inchide"
                running = false;
                break;
            }
        }
    }

     if (running) {
        cleardevice();
        incarcaHarta();
        ipostaza = 1;
        afiseazaMario();
        PlaySound("SuperMarioBros.wav", NULL, SND_ASYNC);
        directie = "dreapta";
        do
        {
            tasta = getch(); if (tasta == 0) tasta = getch();
            if (tasta == STG && jmario > 0 && harta[imario + 1][jmario - 1] != '.') directie = "stanga";
            if (tasta == DRP && jmario < nrColoane - 1 && harta[imario + 1][jmario + 1] != '.')
                directie = "dreapta";
            if (tasta == SUS && harta[imario - 1][jmario] == '#') directie = "sus";
            if (tasta == JOS && harta[imario + 1][jmario] == '#') directie = "jos";
            stergeMario();
            urmatoareaIpostaza();
            updateCamera(1920, 1080);
            delay(30);
        } while (tasta != ESC);
     }

    closegraph();
    gameLog.close();
    return 0;
}
